
LED_Matrix_Weather_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000037c  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f37  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000792  00000000  00000000  00001a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007af  00000000  00000000  000026af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec e7       	ldi	r30, 0x7C	; 124
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 37       	cpi	r26, 0x70	; 112
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a0 e7       	ldi	r26, 0x70	; 112
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 37       	cpi	r26, 0x70	; 112
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	0c d1       	rcall	.+536    	; 0x26e <main>
  56:	90 c1       	rjmp	.+800    	; 0x378 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <i2c_start>:
#include <avr/io.h>
#include <util/delay.h>
#include <c:/users/adamm/Documents/Atmel Studio/7.0/LED_Matrix_Weather_Display/i2c.h>

void i2c_start() {
	PORTA |= 0x10;							// SCL HIGH
  5a:	8b b3       	in	r24, 0x1b	; 27
  5c:	80 61       	ori	r24, 0x10	; 16
  5e:	8b bb       	out	0x1b, r24	; 27
	PORTA |= 0x40;							// SDA HIGH
  60:	8b b3       	in	r24, 0x1b	; 27
  62:	80 64       	ori	r24, 0x40	; 64
  64:	8b bb       	out	0x1b, r24	; 27
	USIDR = 0x00;							// set MSB to 0 - SDA LOW
  66:	1f b8       	out	0x0f, r1	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	89 ef       	ldi	r24, 0xF9	; 249
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <i2c_start+0x12>
  70:	00 c0       	rjmp	.+0      	; 0x72 <i2c_start+0x18>
  72:	00 00       	nop
	_delay_ms(1);
	USICR |= USICLK;						// toggle clock
  74:	8d b1       	in	r24, 0x0d	; 13
  76:	81 60       	ori	r24, 0x01	; 1
  78:	8d b9       	out	0x0d, r24	; 13
  7a:	08 95       	ret

0000007c <i2c_stop>:
}

void i2c_stop() {
	PORTA &= ~(0x10);						// SCL LOW
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	8f 7e       	andi	r24, 0xEF	; 239
  80:	8b bb       	out	0x1b, r24	; 27
	PORTA &= ~(0x40);						// SDA LOW
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	8f 7b       	andi	r24, 0xBF	; 191
  86:	8b bb       	out	0x1b, r24	; 27
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <i2c_stop+0x10>
  90:	00 c0       	rjmp	.+0      	; 0x92 <i2c_stop+0x16>
  92:	00 00       	nop
	_delay_ms(1);
	PORTA |= 0x10;							// SCL HIGH
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	80 61       	ori	r24, 0x10	; 16
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	89 ef       	ldi	r24, 0xF9	; 249
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <i2c_stop+0x22>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <i2c_stop+0x28>
  a4:	00 00       	nop
	_delay_ms(1);							// wait
	PORTA |= 0x40;							// SDA HIGH
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8b bb       	out	0x1b, r24	; 27
	USIDR = 0x80;							// set MSB to 1 - SDA HIGH
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	8f b9       	out	0x0f, r24	; 15
  b0:	08 95       	ret

000000b2 <i2c_send_data>:
}

void i2c_send_data(char data) {
	int i = 0;
	
	for(i = 0; i < 8; i++) {
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	22 c0       	rjmp	.+68     	; 0xfc <i2c_send_data+0x4a>
		if (i == 0) {
  b8:	21 15       	cp	r18, r1
  ba:	31 05       	cpc	r19, r1
  bc:	11 f4       	brne	.+4      	; 0xc2 <i2c_send_data+0x10>
			USIDR = data;
  be:	8f b9       	out	0x0f, r24	; 15
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <i2c_send_data+0x16>
		}
		else {
			USICR |= 0x02;					// output data (shift data register left by 1)
  c2:	9d b1       	in	r25, 0x0d	; 13
  c4:	92 60       	ori	r25, 0x02	; 2
  c6:	9d b9       	out	0x0d, r25	; 13
  c8:	e0 e7       	ldi	r30, 0x70	; 112
  ca:	f2 e0       	ldi	r31, 0x02	; 2
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <i2c_send_data+0x1a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <i2c_send_data+0x20>
  d2:	00 00       	nop
		}
		
		_delay_ms(2.5);
		USICR |= USICLK;					// toggle clock
  d4:	9d b1       	in	r25, 0x0d	; 13
  d6:	91 60       	ori	r25, 0x01	; 1
  d8:	9d b9       	out	0x0d, r25	; 13
  da:	e1 ee       	ldi	r30, 0xE1	; 225
  dc:	f4 e0       	ldi	r31, 0x04	; 4
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <i2c_send_data+0x2c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <i2c_send_data+0x32>
  e4:	00 00       	nop
		_delay_ms(5);
		USICR |= USICLK;					// toggle clock
  e6:	9d b1       	in	r25, 0x0d	; 13
  e8:	91 60       	ori	r25, 0x01	; 1
  ea:	9d b9       	out	0x0d, r25	; 13
  ec:	e0 e7       	ldi	r30, 0x70	; 112
  ee:	f2 e0       	ldi	r31, 0x02	; 2
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <i2c_send_data+0x3e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <i2c_send_data+0x44>
  f6:	00 00       	nop
}

void i2c_send_data(char data) {
	int i = 0;
	
	for(i = 0; i < 8; i++) {
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	28 30       	cpi	r18, 0x08	; 8
  fe:	31 05       	cpc	r19, r1
 100:	dc f2       	brlt	.-74     	; 0xb8 <i2c_send_data+0x6>
		USICR |= USICLK;					// toggle clock
		_delay_ms(5);
		USICR |= USICLK;					// toggle clock
		_delay_ms(2.5);
	}
	USIDR = 0x00;							// set MSB to 0 so that SDA line doesn't go high after ACK/NACK
 102:	1f b8       	out	0x0f, r1	; 15
 104:	80 e7       	ldi	r24, 0x70	; 112
 106:	92 e0       	ldi	r25, 0x02	; 2
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <i2c_send_data+0x56>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <i2c_send_data+0x5c>
 10e:	00 00       	nop

	_delay_ms(2.5);
	USICR |= USICLK;						// toggle clock
 110:	8d b1       	in	r24, 0x0d	; 13
 112:	81 60       	ori	r24, 0x01	; 1
 114:	8d b9       	out	0x0d, r24	; 13
 116:	e1 ee       	ldi	r30, 0xE1	; 225
 118:	f4 e0       	ldi	r31, 0x04	; 4
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <i2c_send_data+0x68>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <i2c_send_data+0x6e>
 120:	00 00       	nop
	_delay_ms(5);
	USICR |= USICLK;						// toggle clock
 122:	8d b1       	in	r24, 0x0d	; 13
 124:	81 60       	ori	r24, 0x01	; 1
 126:	8d b9       	out	0x0d, r24	; 13
 128:	80 e7       	ldi	r24, 0x70	; 112
 12a:	92 e0       	ldi	r25, 0x02	; 2
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <i2c_send_data+0x7a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <i2c_send_data+0x80>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <i2c_send_addr>:
}

void i2c_send_addr(char addr) {
	char registerVal = USISR;
	
	if (registerVal & 0b10000000) {			// turn on LED to verify start condition detected
 136:	77 9b       	sbis	0x0e, 7	; 14
 138:	03 c0       	rjmp	.+6      	; 0x140 <i2c_send_addr+0xa>
		PORTA |= 0x08;
 13a:	9b b3       	in	r25, 0x1b	; 27
 13c:	98 60       	ori	r25, 0x08	; 8
 13e:	9b bb       	out	0x1b, r25	; 27
	}

	USISR &= ~(0x80);						// clear start condition flag
 140:	9e b1       	in	r25, 0x0e	; 14
 142:	9f 77       	andi	r25, 0x7F	; 127
 144:	9e b9       	out	0x0e, r25	; 14
	USISR |= 0x40;							// reset counter flag
 146:	9e b1       	in	r25, 0x0e	; 14
 148:	90 64       	ori	r25, 0x40	; 64
 14a:	9e b9       	out	0x0e, r25	; 14
	USISR &= ~(0x0F);						// reset counter
 14c:	9e b1       	in	r25, 0x0e	; 14
 14e:	90 7f       	andi	r25, 0xF0	; 240
 150:	9e b9       	out	0x0e, r25	; 14

	int i = 0;
	for(i = 0; i < 8; i++) {
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	28 c0       	rjmp	.+80     	; 0x1a8 <i2c_send_addr+0x72>
		if (i == 0) {
 158:	21 15       	cp	r18, r1
 15a:	31 05       	cpc	r19, r1
 15c:	41 f4       	brne	.+16     	; 0x16e <i2c_send_addr+0x38>
 15e:	e1 ee       	ldi	r30, 0xE1	; 225
 160:	f4 e0       	ldi	r31, 0x04	; 4
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <i2c_send_addr+0x2c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <i2c_send_addr+0x32>
 168:	00 00       	nop
			_delay_ms(5);
			USIDR = addr;
 16a:	8f b9       	out	0x0f, r24	; 15
 16c:	03 c0       	rjmp	.+6      	; 0x174 <i2c_send_addr+0x3e>
		}
		else {
			USICR |= 0x02;					// output data (shift data register left by 1)
 16e:	9d b1       	in	r25, 0x0d	; 13
 170:	92 60       	ori	r25, 0x02	; 2
 172:	9d b9       	out	0x0d, r25	; 13
 174:	e0 e7       	ldi	r30, 0x70	; 112
 176:	f2 e0       	ldi	r31, 0x02	; 2
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <i2c_send_addr+0x42>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <i2c_send_addr+0x48>
 17e:	00 00       	nop
		}
		_delay_ms(2.5);
		USICR |= USICLK;					// toggle clock
 180:	9d b1       	in	r25, 0x0d	; 13
 182:	91 60       	ori	r25, 0x01	; 1
 184:	9d b9       	out	0x0d, r25	; 13
 186:	e1 ee       	ldi	r30, 0xE1	; 225
 188:	f4 e0       	ldi	r31, 0x04	; 4
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <i2c_send_addr+0x54>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <i2c_send_addr+0x5a>
 190:	00 00       	nop
		_delay_ms(5);
		USICR |= USICLK;					// toggle clock
 192:	9d b1       	in	r25, 0x0d	; 13
 194:	91 60       	ori	r25, 0x01	; 1
 196:	9d b9       	out	0x0d, r25	; 13
 198:	e0 e7       	ldi	r30, 0x70	; 112
 19a:	f2 e0       	ldi	r31, 0x02	; 2
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <i2c_send_addr+0x66>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <i2c_send_addr+0x6c>
 1a2:	00 00       	nop
	USISR &= ~(0x80);						// clear start condition flag
	USISR |= 0x40;							// reset counter flag
	USISR &= ~(0x0F);						// reset counter

	int i = 0;
	for(i = 0; i < 8; i++) {
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	28 30       	cpi	r18, 0x08	; 8
 1aa:	31 05       	cpc	r19, r1
 1ac:	ac f2       	brlt	.-86     	; 0x158 <i2c_send_addr+0x22>
 1ae:	80 e7       	ldi	r24, 0x70	; 112
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <i2c_send_addr+0x7c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <i2c_send_addr+0x82>
 1b8:	00 00       	nop
		_delay_ms(5);
		USICR |= USICLK;					// toggle clock
		_delay_ms(2.5);
	}
	_delay_ms(2.5);
	USICR |= USICLK;						// toggle clock
 1ba:	8d b1       	in	r24, 0x0d	; 13
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	8d b9       	out	0x0d, r24	; 13
 1c0:	e1 ee       	ldi	r30, 0xE1	; 225
 1c2:	f4 e0       	ldi	r31, 0x04	; 4
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <i2c_send_addr+0x8e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <i2c_send_addr+0x94>
 1ca:	00 00       	nop
	_delay_ms(5);
	USICR |= USICLK;						// toggle clock
 1cc:	8d b1       	in	r24, 0x0d	; 13
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	8d b9       	out	0x0d, r24	; 13
 1d2:	80 e7       	ldi	r24, 0x70	; 112
 1d4:	92 e0       	ldi	r25, 0x02	; 2
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <i2c_send_addr+0xa0>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <i2c_send_addr+0xa6>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <shift_it>:
char shift_it(char byte) {
	//reverse the byte and shift it by 1 bit due to the way the led matrix writes bits to the LEDs
	char mod_byte = 0x00;
	
	int i = 0;
	for(i = 7; i >=0; i--) {
 1e0:	27 e0       	ldi	r18, 0x07	; 7
 1e2:	30 e0       	ldi	r19, 0x00	; 0
    }
}

char shift_it(char byte) {
	//reverse the byte and shift it by 1 bit due to the way the led matrix writes bits to the LEDs
	char mod_byte = 0x00;
 1e4:	90 e0       	ldi	r25, 0x00	; 0
	
	int i = 0;
	for(i = 7; i >=0; i--) {
 1e6:	0e c0       	rjmp	.+28     	; 0x204 <__DATA_REGION_LENGTH__+0x4>
		if (byte & 0x01) {
 1e8:	80 ff       	sbrs	r24, 0
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <shift_it+0x1e>
			mod_byte |= (0x01 << i);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	02 2e       	mov	r0, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <shift_it+0x18>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <shift_it+0x14>
 1fc:	94 2b       	or	r25, r20
		}
		byte >>= 1;
 1fe:	86 95       	lsr	r24
char shift_it(char byte) {
	//reverse the byte and shift it by 1 bit due to the way the led matrix writes bits to the LEDs
	char mod_byte = 0x00;
	
	int i = 0;
	for(i = 7; i >=0; i--) {
 200:	21 50       	subi	r18, 0x01	; 1
 202:	31 09       	sbc	r19, r1
 204:	33 23       	and	r19, r19
 206:	84 f7       	brge	.-32     	; 0x1e8 <shift_it+0x8>
			mod_byte |= (0x01 << i);
		}
		byte >>= 1;
	}
	
	if (mod_byte & 0x01) {
 208:	90 ff       	sbrs	r25, 0
 20a:	04 c0       	rjmp	.+8      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
		return (mod_byte >> 1) | 0x80;		// circular shift and carry the one
 20c:	96 95       	lsr	r25
 20e:	89 2f       	mov	r24, r25
 210:	80 68       	ori	r24, 0x80	; 128
 212:	08 95       	ret
	}
	else {
		return mod_byte >> 1;				// circular shift but no need to carry 
 214:	89 2f       	mov	r24, r25
 216:	86 95       	lsr	r24
	}
}
 218:	08 95       	ret

0000021a <clear_matrix>:

void clear_matrix(char addr) {
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
	i2c_start();
 21e:	1d df       	rcall	.-454    	; 0x5a <i2c_start>
	i2c_send_addr(addr);
 220:	8c 2f       	mov	r24, r28
 222:	89 df       	rcall	.-238    	; 0x136 <i2c_send_addr>
	i2c_send_data(0x00);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	45 df       	rcall	.-374    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	43 df       	rcall	.-378    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	41 df       	rcall	.-382    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	3f df       	rcall	.-386    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	3d df       	rcall	.-390    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	3b df       	rcall	.-394    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	39 df       	rcall	.-398    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	37 df       	rcall	.-402    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	35 df       	rcall	.-406    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	33 df       	rcall	.-410    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	31 df       	rcall	.-414    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	2f df       	rcall	.-418    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	2d df       	rcall	.-422    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	2b df       	rcall	.-426    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	29 df       	rcall	.-430    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	27 df       	rcall	.-434    	; 0xb2 <i2c_send_data>
	i2c_send_data(0x00);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	25 df       	rcall	.-438    	; 0xb2 <i2c_send_data>
	i2c_stop();
 268:	09 df       	rcall	.-494    	; 0x7c <i2c_stop>
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <main>:
};

int main(void)
{
	/******GPIO setup******/
	DDRA |= 0x08;					// set PA3 to OUTPUT
 26e:	8a b3       	in	r24, 0x1a	; 26
 270:	88 60       	ori	r24, 0x08	; 8
 272:	8a bb       	out	0x1a, r24	; 26
	/**********************/
	
	/****Interrupt setup***/
	sei();							// global interrupt enable
 274:	78 94       	sei
	//GIMSK |= 0x10;				// set PCIE0 bit - PCINT7:0 interrupts enabled	
	//PCMSK0 |= 0x01;				// enable PCINT0 interrupt on pin 13 of ATTINY84
	/**********************/

	/*******I2C setup******/
	USICR |= 0x20;					// set USI to Two-Wire mode
 276:	8d b1       	in	r24, 0x0d	; 13
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	8d b9       	out	0x0d, r24	; 13
	USICR &= ~(0x0C);				// set USICS1 and USICS0 bits to 0 for software clock strobe 
 27c:	8d b1       	in	r24, 0x0d	; 13
 27e:	83 7f       	andi	r24, 0xF3	; 243
 280:	8d b9       	out	0x0d, r24	; 13

	DDRA |= 0x50;					// set direction of SCL & SDA pin (PA6, PA4) to enable data output from the USI Data Register
 282:	8a b3       	in	r24, 0x1a	; 26
 284:	80 65       	ori	r24, 0x50	; 80
 286:	8a bb       	out	0x1a, r24	; 26
	
	PORTA |= 0x10;					//PA4 SCL
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	8b bb       	out	0x1b, r24	; 27
	PORTA |= 0x40;					//PA6 SDA
 28e:	8b b3       	in	r24, 0x1b	; 27
 290:	80 64       	ori	r24, 0x40	; 64
 292:	8b bb       	out	0x1b, r24	; 27
	USIDR |= 0xFF;
 294:	8f b1       	in	r24, 0x0f	; 15
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	8f b9       	out	0x0f, r24	; 15
 29a:	83 ec       	ldi	r24, 0xC3	; 195
 29c:	99 e0       	ldi	r25, 0x09	; 9
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x30>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x36>
 2a4:	00 00       	nop
	_delay_ms(10);
	
	int m = 0;
	int currMatrix = 0;
	for(m = 0; m < 2; m++) {			// for loop - interacting with 2 LED matrices
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	61 c0       	rjmp	.+194    	; 0x36e <main+0x100>
		if (m == 0) {
 2ac:	01 15       	cp	r16, r1
 2ae:	11 05       	cpc	r17, r1
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <main+0x48>
			currMatrix = MTX_0;
 2b2:	c0 ee       	ldi	r28, 0xE0	; 224
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <main+0x4a>
		}
		else {
			currMatrix = MTX_1;
 2b6:	c2 ee       	ldi	r28, 0xE2	; 226
		}
		i2c_start();
 2b8:	d0 de       	rcall	.-608    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);		// addr followed by R/W bit - 0 = controller write, 1 = controller read
 2ba:	8c 2f       	mov	r24, r28
 2bc:	3c df       	rcall	.-392    	; 0x136 <i2c_send_addr>
		i2c_send_data(0x21);			// internal clock enable
 2be:	81 e2       	ldi	r24, 0x21	; 33
 2c0:	f8 de       	rcall	.-528    	; 0xb2 <i2c_send_data>
		i2c_stop();
 2c2:	dc de       	rcall	.-584    	; 0x7c <i2c_stop>
 2c4:	83 ec       	ldi	r24, 0xC3	; 195
 2c6:	99 e0       	ldi	r25, 0x09	; 9
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0x5a>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x60>
 2ce:	00 00       	nop
	
		_delay_ms(10);
	
		i2c_start();
 2d0:	c4 de       	rcall	.-632    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	30 df       	rcall	.-416    	; 0x136 <i2c_send_addr>
		i2c_send_data(0xA0);			// row/int set
 2d6:	80 ea       	ldi	r24, 0xA0	; 160
 2d8:	ec de       	rcall	.-552    	; 0xb2 <i2c_send_data>
		i2c_stop();
 2da:	d0 de       	rcall	.-608    	; 0x7c <i2c_stop>
 2dc:	83 ec       	ldi	r24, 0xC3	; 195
 2de:	99 e0       	ldi	r25, 0x09	; 9
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0x72>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x78>
 2e6:	00 00       	nop
	
		_delay_ms(10);
	
		i2c_start();
 2e8:	b8 de       	rcall	.-656    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 2ea:	8c 2f       	mov	r24, r28
 2ec:	24 df       	rcall	.-440    	; 0x136 <i2c_send_addr>
		i2c_send_data(0xEF);			// dimming set
 2ee:	8f ee       	ldi	r24, 0xEF	; 239
 2f0:	e0 de       	rcall	.-576    	; 0xb2 <i2c_send_data>
		i2c_stop();
 2f2:	c4 de       	rcall	.-632    	; 0x7c <i2c_stop>
 2f4:	83 ec       	ldi	r24, 0xC3	; 195
 2f6:	99 e0       	ldi	r25, 0x09	; 9
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x8a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x90>
 2fe:	00 00       	nop
	
		_delay_ms(10);
	
		i2c_start();
 300:	ac de       	rcall	.-680    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 302:	8c 2f       	mov	r24, r28
 304:	18 df       	rcall	.-464    	; 0x136 <i2c_send_addr>
		i2c_send_data(0x81);			// blinking set
 306:	81 e8       	ldi	r24, 0x81	; 129
 308:	d4 de       	rcall	.-600    	; 0xb2 <i2c_send_data>
		i2c_stop();
 30a:	b8 de       	rcall	.-656    	; 0x7c <i2c_stop>
 30c:	83 ec       	ldi	r24, 0xC3	; 195
 30e:	99 e0       	ldi	r25, 0x09	; 9
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0xa2>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0xa8>
 316:	00 00       	nop
	
		_delay_ms(10);
		
		clear_matrix(currMatrix);
 318:	8c 2f       	mov	r24, r28
 31a:	7f df       	rcall	.-258    	; 0x21a <clear_matrix>
 31c:	83 ec       	ldi	r24, 0xC3	; 195
 31e:	99 e0       	ldi	r25, 0x09	; 9
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0xb2>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0xb8>
 326:	00 00       	nop
		_delay_ms(10);

		i2c_start();
 328:	98 de       	rcall	.-720    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 32a:	8c 2f       	mov	r24, r28
 32c:	04 df       	rcall	.-504    	; 0x136 <i2c_send_addr>
		i2c_send_data(0x00);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	c0 de       	rcall	.-640    	; 0xb2 <i2c_send_data>
		int c = 0;
		for (c = 0; c < 8; c++) {
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	d0 e0       	ldi	r29, 0x00	; 0
 336:	15 c0       	rjmp	.+42     	; 0x362 <main+0xf4>
			i2c_send_data(shift_it(((one_bitmap[c] << 2) | (zero_bitmap[c] >> 2))));	// write out bitmaps to LED and shift them to opposite sides so both digits appear on screen
 338:	fe 01       	movw	r30, r28
 33a:	e0 5a       	subi	r30, 0xA0	; 160
 33c:	ff 4f       	sbci	r31, 0xFF	; 255
 33e:	80 81       	ld	r24, Z
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	fe 01       	movw	r30, r28
 34c:	e8 59       	subi	r30, 0x98	; 152
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	90 81       	ld	r25, Z
 352:	96 95       	lsr	r25
 354:	96 95       	lsr	r25
 356:	89 2b       	or	r24, r25
 358:	43 df       	rcall	.-378    	; 0x1e0 <shift_it>
 35a:	ab de       	rcall	.-682    	; 0xb2 <i2c_send_data>
			i2c_send_data(0x00);														// skip one address in display RAM since only every-other address is tied to an LED row on the matrix
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	a9 de       	rcall	.-686    	; 0xb2 <i2c_send_data>

		i2c_start();
		i2c_send_addr(currMatrix);
		i2c_send_data(0x00);
		int c = 0;
		for (c = 0; c < 8; c++) {
 360:	21 96       	adiw	r28, 0x01	; 1
 362:	c8 30       	cpi	r28, 0x08	; 8
 364:	d1 05       	cpc	r29, r1
 366:	44 f3       	brlt	.-48     	; 0x338 <main+0xca>
			i2c_send_data(shift_it(((one_bitmap[c] << 2) | (zero_bitmap[c] >> 2))));	// write out bitmaps to LED and shift them to opposite sides so both digits appear on screen
			i2c_send_data(0x00);														// skip one address in display RAM since only every-other address is tied to an LED row on the matrix
		}
		i2c_stop();
 368:	89 de       	rcall	.-750    	; 0x7c <i2c_stop>
	USIDR |= 0xFF;
	_delay_ms(10);
	
	int m = 0;
	int currMatrix = 0;
	for(m = 0; m < 2; m++) {			// for loop - interacting with 2 LED matrices
 36a:	0f 5f       	subi	r16, 0xFF	; 255
 36c:	1f 4f       	sbci	r17, 0xFF	; 255
 36e:	02 30       	cpi	r16, 0x02	; 2
 370:	11 05       	cpc	r17, r1
 372:	0c f4       	brge	.+2      	; 0x376 <main+0x108>
 374:	9b cf       	rjmp	.-202    	; 0x2ac <main+0x3e>
 376:	ff cf       	rjmp	.-2      	; 0x376 <main+0x108>

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
