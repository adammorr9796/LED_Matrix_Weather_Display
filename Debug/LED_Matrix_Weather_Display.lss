
LED_Matrix_Weather_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002f0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001016  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a2  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000793  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000693  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 ef       	ldi	r30, 0xF0	; 240
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a8 37       	cpi	r26, 0x78	; 120
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a8 e7       	ldi	r26, 0x78	; 120
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a8 37       	cpi	r26, 0x78	; 120
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	ce d0       	rcall	.+412    	; 0x1f2 <main>
  56:	4a c1       	rjmp	.+660    	; 0x2ec <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <i2c_start>:
#include <avr/io.h>
#include <util/delay.h>
#include <c:/users/adamm/Documents/Atmel Studio/7.0/LED_Matrix_Weather_Display/i2c.h>

void i2c_start() {
	PORTA |= 0x10;							// SCL HIGH
  5a:	8b b3       	in	r24, 0x1b	; 27
  5c:	80 61       	ori	r24, 0x10	; 16
  5e:	8b bb       	out	0x1b, r24	; 27
	PORTA |= 0x40;							// SDA HIGH
  60:	8b b3       	in	r24, 0x1b	; 27
  62:	80 64       	ori	r24, 0x40	; 64
  64:	8b bb       	out	0x1b, r24	; 27
	USIDR = 0x00;							// set MSB to 0 - SDA LOW
  66:	1f b8       	out	0x0f, r1	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	00 00       	nop
	_delay_us(1);
	USICR |= USICLK;						// toggle clock
  6a:	8d b1       	in	r24, 0x0d	; 13
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	8d b9       	out	0x0d, r24	; 13
  70:	08 95       	ret

00000072 <i2c_stop>:
}

void i2c_stop() {
	PORTA &= ~(0x10);						// SCL LOW
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	8f 7e       	andi	r24, 0xEF	; 239
  76:	8b bb       	out	0x1b, r24	; 27
	PORTA &= ~(0x40);						// SDA LOW
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	8f 7b       	andi	r24, 0xBF	; 191
  7c:	8b bb       	out	0x1b, r24	; 27
  7e:	00 00       	nop
	_delay_us(1);
	PORTA |= 0x10;							// SCL HIGH
  80:	8b b3       	in	r24, 0x1b	; 27
  82:	80 61       	ori	r24, 0x10	; 16
  84:	8b bb       	out	0x1b, r24	; 27
  86:	00 00       	nop
	_delay_us(1);							// wait
	PORTA |= 0x40;							// SDA HIGH
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	8b bb       	out	0x1b, r24	; 27
	USIDR = 0x80;							// set MSB to 1 - SDA HIGH
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	8f b9       	out	0x0f, r24	; 15
  92:	08 95       	ret

00000094 <i2c_send_data>:
}

void i2c_send_data(char data) {
	int i = 0;
	
	for(i = 0; i < 8; i++) {
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <i2c_send_data+0x34>
		if (i == 0) {
  9a:	21 15       	cp	r18, r1
  9c:	31 05       	cpc	r19, r1
  9e:	11 f4       	brne	.+4      	; 0xa4 <i2c_send_data+0x10>
			USIDR = data;
  a0:	8f b9       	out	0x0f, r24	; 15
  a2:	03 c0       	rjmp	.+6      	; 0xaa <i2c_send_data+0x16>
		}
		else {
			USICR |= 0x02;					// output data (shift data register left by 1)
  a4:	9d b1       	in	r25, 0x0d	; 13
  a6:	92 60       	ori	r25, 0x02	; 2
  a8:	9d b9       	out	0x0d, r25	; 13
  aa:	00 c0       	rjmp	.+0      	; 0xac <i2c_send_data+0x18>
  ac:	00 00       	nop
		}
		
		_delay_us(2.5);
		USICR |= USICLK;					// toggle clock
  ae:	9d b1       	in	r25, 0x0d	; 13
  b0:	91 60       	ori	r25, 0x01	; 1
  b2:	9d b9       	out	0x0d, r25	; 13
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <i2c_send_data+0x22>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <i2c_send_data+0x24>
  b8:	00 00       	nop
		_delay_us(5);
		USICR |= USICLK;					// toggle clock
  ba:	9d b1       	in	r25, 0x0d	; 13
  bc:	91 60       	ori	r25, 0x01	; 1
  be:	9d b9       	out	0x0d, r25	; 13
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <i2c_send_data+0x2e>
  c2:	00 00       	nop
}

void i2c_send_data(char data) {
	int i = 0;
	
	for(i = 0; i < 8; i++) {
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 30       	cpi	r18, 0x08	; 8
  ca:	31 05       	cpc	r19, r1
  cc:	34 f3       	brlt	.-52     	; 0x9a <i2c_send_data+0x6>
		USICR |= USICLK;					// toggle clock
		_delay_us(5);
		USICR |= USICLK;					// toggle clock
		_delay_us(2.5);
	}
	USIDR = 0x00;							// set MSB to 0 so that SDA line doesn't go high after ACK/NACK
  ce:	1f b8       	out	0x0f, r1	; 15
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <i2c_send_data+0x3e>
  d2:	00 00       	nop

	_delay_us(2.5);
	USICR |= USICLK;						// toggle clock
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8d b9       	out	0x0d, r24	; 13
  da:	00 c0       	rjmp	.+0      	; 0xdc <i2c_send_data+0x48>
  dc:	00 c0       	rjmp	.+0      	; 0xde <i2c_send_data+0x4a>
  de:	00 00       	nop
	_delay_us(5);
	USICR |= USICLK;						// toggle clock
  e0:	8d b1       	in	r24, 0x0d	; 13
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8d b9       	out	0x0d, r24	; 13
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <i2c_send_data+0x54>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <i2c_send_addr>:
}

void i2c_send_addr(char addr) {
	char registerVal = USISR;
	
	if (registerVal & 0b10000000) {			// turn on LED to verify start condition detected
  ec:	77 9b       	sbis	0x0e, 7	; 14
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <i2c_send_addr+0xa>
		PORTA |= 0x08;
  f0:	9b b3       	in	r25, 0x1b	; 27
  f2:	98 60       	ori	r25, 0x08	; 8
  f4:	9b bb       	out	0x1b, r25	; 27
	}

	USISR &= ~(0x80);						// clear start condition flag
  f6:	9e b1       	in	r25, 0x0e	; 14
  f8:	9f 77       	andi	r25, 0x7F	; 127
  fa:	9e b9       	out	0x0e, r25	; 14
	USISR |= 0x40;							// reset counter flag
  fc:	9e b1       	in	r25, 0x0e	; 14
  fe:	90 64       	ori	r25, 0x40	; 64
 100:	9e b9       	out	0x0e, r25	; 14
	USISR &= ~(0x0F);						// reset counter
 102:	9e b1       	in	r25, 0x0e	; 14
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	9e b9       	out	0x0e, r25	; 14

	int i = 0;
	for(i = 0; i < 8; i++) {
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	1a c0       	rjmp	.+52     	; 0x142 <i2c_send_addr+0x56>
		if (i == 0) {
 10e:	21 15       	cp	r18, r1
 110:	31 05       	cpc	r19, r1
 112:	29 f4       	brne	.+10     	; 0x11e <i2c_send_addr+0x32>
 114:	00 c0       	rjmp	.+0      	; 0x116 <i2c_send_addr+0x2a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <i2c_send_addr+0x2c>
 118:	00 00       	nop
			_delay_us(5);
			USIDR = addr;
 11a:	8f b9       	out	0x0f, r24	; 15
 11c:	03 c0       	rjmp	.+6      	; 0x124 <i2c_send_addr+0x38>
		}
		else {
			USICR |= 0x02;					// output data (shift data register left by 1)
 11e:	9d b1       	in	r25, 0x0d	; 13
 120:	92 60       	ori	r25, 0x02	; 2
 122:	9d b9       	out	0x0d, r25	; 13
 124:	00 c0       	rjmp	.+0      	; 0x126 <i2c_send_addr+0x3a>
 126:	00 00       	nop
		}
		_delay_us(2.5);
		USICR |= USICLK;					// toggle clock
 128:	9d b1       	in	r25, 0x0d	; 13
 12a:	91 60       	ori	r25, 0x01	; 1
 12c:	9d b9       	out	0x0d, r25	; 13
 12e:	00 c0       	rjmp	.+0      	; 0x130 <i2c_send_addr+0x44>
 130:	00 c0       	rjmp	.+0      	; 0x132 <i2c_send_addr+0x46>
 132:	00 00       	nop
		_delay_us(5);
		USICR |= USICLK;					// toggle clock
 134:	9d b1       	in	r25, 0x0d	; 13
 136:	91 60       	ori	r25, 0x01	; 1
 138:	9d b9       	out	0x0d, r25	; 13
 13a:	00 c0       	rjmp	.+0      	; 0x13c <i2c_send_addr+0x50>
 13c:	00 00       	nop
	USISR &= ~(0x80);						// clear start condition flag
	USISR |= 0x40;							// reset counter flag
	USISR &= ~(0x0F);						// reset counter

	int i = 0;
	for(i = 0; i < 8; i++) {
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	28 30       	cpi	r18, 0x08	; 8
 144:	31 05       	cpc	r19, r1
 146:	1c f3       	brlt	.-58     	; 0x10e <i2c_send_addr+0x22>
 148:	00 c0       	rjmp	.+0      	; 0x14a <i2c_send_addr+0x5e>
 14a:	00 00       	nop
		_delay_us(5);
		USICR |= USICLK;					// toggle clock
		_delay_us(2.5);
	}
	_delay_us(2.5);
	USICR |= USICLK;						// toggle clock
 14c:	8d b1       	in	r24, 0x0d	; 13
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	8d b9       	out	0x0d, r24	; 13
 152:	00 c0       	rjmp	.+0      	; 0x154 <i2c_send_addr+0x68>
 154:	00 c0       	rjmp	.+0      	; 0x156 <i2c_send_addr+0x6a>
 156:	00 00       	nop
	_delay_us(5);
	USICR |= USICLK;						// toggle clock
 158:	8d b1       	in	r24, 0x0d	; 13
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	8d b9       	out	0x0d, r24	; 13
 15e:	00 c0       	rjmp	.+0      	; 0x160 <i2c_send_addr+0x74>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <shift_it>:
char shift_it(char byte) {
	//reverse the byte and shift it by 1 bit due to the way the led matrix writes bits to the LEDs
	char mod_byte = 0x00;
	
	int i = 0;
	for(i = 7; i >=0; i--) {
 164:	27 e0       	ldi	r18, 0x07	; 7
 166:	30 e0       	ldi	r19, 0x00	; 0
    }
}

char shift_it(char byte) {
	//reverse the byte and shift it by 1 bit due to the way the led matrix writes bits to the LEDs
	char mod_byte = 0x00;
 168:	90 e0       	ldi	r25, 0x00	; 0
	
	int i = 0;
	for(i = 7; i >=0; i--) {
 16a:	0e c0       	rjmp	.+28     	; 0x188 <shift_it+0x24>
		if (byte & 0x01) {
 16c:	80 ff       	sbrs	r24, 0
 16e:	09 c0       	rjmp	.+18     	; 0x182 <shift_it+0x1e>
			mod_byte |= (0x01 << i);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <shift_it+0x18>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <shift_it+0x14>
 180:	94 2b       	or	r25, r20
		}
		byte >>= 1;
 182:	86 95       	lsr	r24
char shift_it(char byte) {
	//reverse the byte and shift it by 1 bit due to the way the led matrix writes bits to the LEDs
	char mod_byte = 0x00;
	
	int i = 0;
	for(i = 7; i >=0; i--) {
 184:	21 50       	subi	r18, 0x01	; 1
 186:	31 09       	sbc	r19, r1
 188:	33 23       	and	r19, r19
 18a:	84 f7       	brge	.-32     	; 0x16c <shift_it+0x8>
			mod_byte |= (0x01 << i);
		}
		byte >>= 1;
	}
	
	if (mod_byte & 0x01) {
 18c:	90 ff       	sbrs	r25, 0
 18e:	04 c0       	rjmp	.+8      	; 0x198 <shift_it+0x34>
		return (mod_byte >> 1) | 0x80;		// circular shift and carry the one
 190:	96 95       	lsr	r25
 192:	89 2f       	mov	r24, r25
 194:	80 68       	ori	r24, 0x80	; 128
 196:	08 95       	ret
	}
	else {
		return mod_byte >> 1;				// circular shift but no need to carry 
 198:	89 2f       	mov	r24, r25
 19a:	86 95       	lsr	r24
	}
}
 19c:	08 95       	ret

0000019e <clear_matrix>:

void clear_matrix(char addr) {
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
	i2c_start();
 1a2:	5b df       	rcall	.-330    	; 0x5a <i2c_start>
	i2c_send_addr(addr);
 1a4:	8c 2f       	mov	r24, r28
 1a6:	a2 df       	rcall	.-188    	; 0xec <i2c_send_addr>
	i2c_send_data(0x00);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	74 df       	rcall	.-280    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	72 df       	rcall	.-284    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	70 df       	rcall	.-288    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	6e df       	rcall	.-292    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	6c df       	rcall	.-296    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	6a df       	rcall	.-300    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	68 df       	rcall	.-304    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	66 df       	rcall	.-308    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	64 df       	rcall	.-312    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	62 df       	rcall	.-316    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	60 df       	rcall	.-320    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	5e df       	rcall	.-324    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	5c df       	rcall	.-328    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	5a df       	rcall	.-332    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	58 df       	rcall	.-336    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	56 df       	rcall	.-340    	; 0x94 <i2c_send_data>
	i2c_send_data(0x00);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	54 df       	rcall	.-344    	; 0x94 <i2c_send_data>
	i2c_stop();
 1ec:	42 df       	rcall	.-380    	; 0x72 <i2c_stop>
}
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <main>:
};

int main(void)
{
	/******GPIO setup******/
	DDRA |= 0x08;					// set PA3 to OUTPUT
 1f2:	8a b3       	in	r24, 0x1a	; 26
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	8a bb       	out	0x1a, r24	; 26
	/**********************/
	
	/****Interrupt setup***/
	sei();							// global interrupt enable
 1f8:	78 94       	sei
	//GIMSK |= 0x10;				// set PCIE0 bit - PCINT7:0 interrupts enabled	
	//PCMSK0 |= 0x01;				// enable PCINT0 interrupt on pin 13 of ATTINY84
	/**********************/

	/*******I2C setup******/
	USICR |= 0x20;					// set USI to Two-Wire mode
 1fa:	8d b1       	in	r24, 0x0d	; 13
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	8d b9       	out	0x0d, r24	; 13
	USICR &= ~(0x0C);				// set USICS1 and USICS0 bits to 0 for software clock strobe 
 200:	8d b1       	in	r24, 0x0d	; 13
 202:	83 7f       	andi	r24, 0xF3	; 243
 204:	8d b9       	out	0x0d, r24	; 13

	DDRA |= 0x50;					// set direction of SCL & SDA pin (PA6, PA4) to enable data output from the USI Data Register
 206:	8a b3       	in	r24, 0x1a	; 26
 208:	80 65       	ori	r24, 0x50	; 80
 20a:	8a bb       	out	0x1a, r24	; 26
	
	PORTA |= 0x10;					//PA4 SCL
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	80 61       	ori	r24, 0x10	; 16
 210:	8b bb       	out	0x1b, r24	; 27
	PORTA |= 0x40;					//PA6 SDA
 212:	8b b3       	in	r24, 0x1b	; 27
 214:	80 64       	ori	r24, 0x40	; 64
 216:	8b bb       	out	0x1b, r24	; 27
	USIDR |= 0xFF;
 218:	8f b1       	in	r24, 0x0f	; 15
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	8f b9       	out	0x0f, r24	; 15
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <__DATA_REGION_LENGTH__+0x20>
 224:	00 00       	nop
	/**********************/
	
	int m = 0;
	int currMatrix = 0;
	
	for(m = 0; m < 2; m++) {			// interacting with 2 LED matrices with 2 different addresses
 226:	00 e0       	ldi	r16, 0x00	; 0
 228:	10 e0       	ldi	r17, 0x00	; 0
 22a:	5b c0       	rjmp	.+182    	; 0x2e2 <__stack+0x83>
		if (m == 0) {
 22c:	01 15       	cp	r16, r1
 22e:	11 05       	cpc	r17, r1
 230:	11 f4       	brne	.+4      	; 0x236 <__DATA_REGION_LENGTH__+0x36>
			currMatrix = MTX_0;
 232:	c0 ee       	ldi	r28, 0xE0	; 224
 234:	01 c0       	rjmp	.+2      	; 0x238 <__DATA_REGION_LENGTH__+0x38>
		}
		else {
			currMatrix = MTX_1;
 236:	c2 ee       	ldi	r28, 0xE2	; 226
		}
		i2c_start();
 238:	10 df       	rcall	.-480    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);		// addr followed by R/W bit - 0 = controller write, 1 = controller read
 23a:	8c 2f       	mov	r24, r28
 23c:	57 df       	rcall	.-338    	; 0xec <i2c_send_addr>
		i2c_send_data(0x21);			// internal clock enable
 23e:	81 e2       	ldi	r24, 0x21	; 33
 240:	29 df       	rcall	.-430    	; 0x94 <i2c_send_data>
		i2c_stop();
 242:	17 df       	rcall	.-466    	; 0x72 <i2c_stop>
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <__DATA_REGION_LENGTH__+0x46>
 24a:	00 00       	nop
	
		_delay_us(10);
	
		i2c_start();
 24c:	06 df       	rcall	.-500    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 24e:	8c 2f       	mov	r24, r28
 250:	4d df       	rcall	.-358    	; 0xec <i2c_send_addr>
		i2c_send_data(0xA0);			// row/int set
 252:	80 ea       	ldi	r24, 0xA0	; 160
 254:	1f df       	rcall	.-450    	; 0x94 <i2c_send_data>
		i2c_stop();
 256:	0d df       	rcall	.-486    	; 0x72 <i2c_stop>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <__DATA_REGION_LENGTH__+0x5a>
 25e:	00 00       	nop
	
		_delay_us(10);
	
		i2c_start();
 260:	fc de       	rcall	.-520    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 262:	8c 2f       	mov	r24, r28
 264:	43 df       	rcall	.-378    	; 0xec <i2c_send_addr>
		i2c_send_data(0xE1);			// dimming set
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	15 df       	rcall	.-470    	; 0x94 <i2c_send_data>
		i2c_stop();
 26a:	03 df       	rcall	.-506    	; 0x72 <i2c_stop>
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <__stack+0xf>
 272:	00 00       	nop
	
		_delay_us(10);
	
		i2c_start();
 274:	f2 de       	rcall	.-540    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 276:	8c 2f       	mov	r24, r28
 278:	39 df       	rcall	.-398    	; 0xec <i2c_send_addr>
		i2c_send_data(0x81);			// blinking set
 27a:	81 e8       	ldi	r24, 0x81	; 129
 27c:	0b df       	rcall	.-490    	; 0x94 <i2c_send_data>
		i2c_stop();
 27e:	f9 de       	rcall	.-526    	; 0x72 <i2c_stop>
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	8a 95       	dec	r24
 284:	f1 f7       	brne	.-4      	; 0x282 <__stack+0x23>
 286:	00 00       	nop
	
		_delay_us(10);
		
		clear_matrix(currMatrix);
 288:	8c 2f       	mov	r24, r28
 28a:	89 df       	rcall	.-238    	; 0x19e <clear_matrix>
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <__stack+0x2f>
 292:	00 00       	nop
		_delay_us(10);

		i2c_start();
 294:	e2 de       	rcall	.-572    	; 0x5a <i2c_start>
		i2c_send_addr(currMatrix);
 296:	8c 2f       	mov	r24, r28
 298:	29 df       	rcall	.-430    	; 0xec <i2c_send_addr>
		i2c_send_data(0x00);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	fb de       	rcall	.-522    	; 0x94 <i2c_send_data>
		
		int c = 0;
		for (c = 0; c < 8; c++) {
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	19 c0       	rjmp	.+50     	; 0x2d6 <__stack+0x77>
			i2c_send_data(shift_it(((neg_bitmap[c]) | (zero_bitmap[c] << 1) | (seven_bitmap[c] >> 3))));	// write out bitmaps to LED and shift them to opposite sides so both digits appear on screen
 2a4:	fe 01       	movw	r30, r28
 2a6:	e0 5a       	subi	r30, 0xA0	; 160
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	20 81       	ld	r18, Z
 2ac:	fe 01       	movw	r30, r28
 2ae:	e0 59       	subi	r30, 0x90	; 144
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	80 81       	ld	r24, Z
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	fe 01       	movw	r30, r28
 2bc:	e8 59       	subi	r30, 0x98	; 152
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	90 81       	ld	r25, Z
 2c2:	82 2b       	or	r24, r18
 2c4:	96 95       	lsr	r25
 2c6:	96 95       	lsr	r25
 2c8:	96 95       	lsr	r25
 2ca:	89 2b       	or	r24, r25
 2cc:	4b df       	rcall	.-362    	; 0x164 <shift_it>
 2ce:	e2 de       	rcall	.-572    	; 0x94 <i2c_send_data>
			i2c_send_data(0x00);														// skip one address in display RAM since only every-other address is tied to an LED row on the matrix
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	e0 de       	rcall	.-576    	; 0x94 <i2c_send_data>
		i2c_start();
		i2c_send_addr(currMatrix);
		i2c_send_data(0x00);
		
		int c = 0;
		for (c = 0; c < 8; c++) {
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	c8 30       	cpi	r28, 0x08	; 8
 2d8:	d1 05       	cpc	r29, r1
 2da:	24 f3       	brlt	.-56     	; 0x2a4 <__stack+0x45>
			i2c_send_data(shift_it(((neg_bitmap[c]) | (zero_bitmap[c] << 1) | (seven_bitmap[c] >> 3))));	// write out bitmaps to LED and shift them to opposite sides so both digits appear on screen
			i2c_send_data(0x00);														// skip one address in display RAM since only every-other address is tied to an LED row on the matrix
		}
		
		i2c_stop();
 2dc:	ca de       	rcall	.-620    	; 0x72 <i2c_stop>
	/**********************/
	
	int m = 0;
	int currMatrix = 0;
	
	for(m = 0; m < 2; m++) {			// interacting with 2 LED matrices with 2 different addresses
 2de:	0f 5f       	subi	r16, 0xFF	; 255
 2e0:	1f 4f       	sbci	r17, 0xFF	; 255
 2e2:	02 30       	cpi	r16, 0x02	; 2
 2e4:	11 05       	cpc	r17, r1
 2e6:	0c f4       	brge	.+2      	; 0x2ea <__stack+0x8b>
 2e8:	a1 cf       	rjmp	.-190    	; 0x22c <__DATA_REGION_LENGTH__+0x2c>
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stack+0x8b>

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
